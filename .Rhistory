#install.packages("devtools",dependencies = T) #Install devtool required
library(devtools)
if (!require(devtools, quietly = TRUE)) install.packages("devtools")
library("devtools")             ## this might give a warning like 'WARNING: Rtools is required ...'. Ignore it.
## use build_vignettes = FALSE if you did not install pandoc or if you encounter errors when building vignettes (e.g. PRIDE ftp unavailable)!
install_github("cbielow/PTXQC", build_vignettes = TRUE, dependencies = TRUE)
install.packages("PTXQC")
#install.packages("devtools",dependencies = T) #Install devtool required
library(devtools)
library(PTXQC) # load the PTXQC library
if (!require(devtools, quietly = TRUE)) install.packages("devtools")
library("devtools")             ## this might give a warning like 'WARNING: Rtools is required ...'. Ignore it.
## use build_vignettes = FALSE if you did not install pandoc or if you encounter errors when building vignettes (e.g. PRIDE ftp unavailable)!
install_github("cbielow/PTXQC", build_vignettes = TRUE, dependencies = TRUE)
install.packages("devtools")
devtools::install_github("cbielow/PTXQC", build_vignettes = TRUE, dependencies = TRUE)
install.packages("devtools",dependencies = T)
library("devtools")             ## this might give a warning like 'WARNING: Rtools is required ...'. Ignore it.
## GitHub
if (!require(devtools, quietly = TRUE)) install.packages("devtools")
#install.packages("devtools",dependencies = T) #Install devtool required
library(devtools)
f (!require(devtools, quietly = TRUE)) install.packages("devtools")
library("devtools")             ## this might give a warning like 'WARNING: Rtools is required ...'. Ignore it.
## GitHub
if (!require(devtools, quietly = TRUE)) install.packages("devtools")
library("devtools")             ## this might give a warning like 'WARNING: Rtools is required ...'. Ignore it.
#install.packages("devtools",dependencies = T) #Install devtool required
library(devtools)
install.packages("PTXQC")
library(PTXQC) # load the PTXQC library
devtools::install_github("cbielow/PTXQC", build_vignettes = TRUE, dependencies = TRUE)
library(PTXQC) # load the PTXQC library
install.packages("PTXQC")
## use build_vignettes = FALSE if you did not install pandoc or if you encounter errors when building vignettes (e.g. PRIDE ftp unavailable)!
install_github("cbielow/PTXQC", build_vignettes = TRUE, dependencies = TRUE)
require(yaml)
library(PTXQC) # load the PTXQC library
## use build_vignettes = FALSE if you did not install pandoc or if you encounter errors when building vignettes (e.g. PRIDE ftp unavailable)!
install_github("cbielow/PTXQC", build_vignettes = TRUE, dependencies = TRUE)
require(methods)
install.packages("PTXQC")
install.packages("PTXQC",dependencies = TRUE)
library(PTXQC) # load the PTXQC library
install.packages("xml2",dependencies = T)
install.packages("rvest",dependencies = T)
install.packages("kableExtra",dependencies = T)
library(xml2)
library(rvest)
library(kableExtra)
## use build_vignettes = FALSE if you did not install pandoc or if you encounter errors when building vignettes (e.g. PRIDE ftp unavailable)!
install_github("cbielow/PTXQC", build_vignettes = TRUE, dependencies = TRUE)
library("devtools")             ## this might give a warning like 'WARNING: Rtools is required ...'. Ignore it.
library(PTXQC) # load the PTXQC library
devtools::install_github("cbielow/PTXQC", build_vignettes = TRUE, dependencies = TRUE)
library("devtools")             ## this might give a warning like 'WARNING: Rtools is required ...'. Ignore it.
## use build_vignettes = FALSE if you did not install pandoc or if you encounter errors when building vignettes (e.g. PRIDE ftp unavailable)!
install_github("cbielow/PTXQC", build_vignettes = TRUE, dependencies = TRUE)
library(PTXQC) # load the PTXQC library
library(PTXQC) # load the PTXQC library
require(PTXQC)
require(yaml)
require(methods)
#setwd("M:/2018/TB/Clemens/QE/20180807_Reprocessing_BAL/combined_Human_Metanova/")
# Generating the default report
text_folder <- "/home/javan/Desktop/clemens_data/combined_B1/txt" #if you have local MaxQuant output, just use it, loading txt folder in the combined folder
r = createReport(text_folder) #Create the report in *.xml format
#setwd("M:/2018/TB/Clemens/QE/20180807_Reprocessing_BAL/combined_Human_Metanova/")
# Generating the default report
text_folder <- "/home/javan/Desktop/clemens_data/combined_B2B/txt" #if you have local MaxQuant output, just use it, loading txt folder in the combined folder
r = createReport(text_folder) #Create the report in *.xml format
#setwd("M:/2018/TB/Clemens/QE/20180807_Reprocessing_BAL/combined_Human_Metanova/")
# Generating the default report
text_folder <- "/home/javan/Desktop/clemens_data/combined_B2P/txt" #if you have local MaxQuant output, just use it, loading txt folder in the combined folder
r = createReport(text_folder) #Create the report in *.xml format
#setwd("M:/2018/TB/Clemens/QE/20180807_Reprocessing_BAL/combined_Human_Metanova/")
# Generating the default report
text_folder <- "/home/javan/Desktop/clemens_data/optimization/txt" #if you have local MaxQuant output, just use it, loading txt folder in the combined folder
r = createReport(text_folder) #Create the report in *.xml format
library("devtools")             ## this might give a warning like 'WARNING: Rtools is required ...'. Ignore it.
library(PTXQC) # load the PTXQC library
require(PTXQC)
require(yaml)
require(methods)
#setwd("M:/2018/TB/Clemens/QE/20180807_Reprocessing_BAL/combined_Human_Metanova/")
# Generating the default report
text_folder <- "/home/javan/Desktop/dell/Database_search_results/Crux_filteredUniprot_database/percolator.target.proteins.txt" #if you have local MaxQuant output, just use it, loading txt folder in the combined folder
r = createReport(text_folder) #Create the report in *.xml format
#setwd("M:/2018/TB/Clemens/QE/20180807_Reprocessing_BAL/combined_Human_Metanova/")
# Generating the default report
text_folder <- "/home/javan/Desktop/dell/Database_search_results/Crux_filteredUniprot_database" #if you have local MaxQuant output, just use it, loading txt folder in the combined folder
r = createReport(text_folder) #Create the report in *.xml format
ibrary("devtools")             ## this might give a warning like 'WARNING: Rtools is required ...'. Ignore it.
library(PTXQC) # load the PTXQC library
require(PTXQC)
require(yaml)
require(methods)
r
trace("createReport",edit = T)
#The best way to install all these pakages is to use the following code
library("BiocManager")
BiocManager::install("RforProteomics", dependencies = TRUE)
#The best way to install all these pakages is to use the following code
install.packages("BiocManager",dependencies = T)
library("BiocManager")
chooseCRANmirror()
install.packages("BiocManager")
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
#library("mzID")
#library("MSnID")
#library("MSnbase")
#library("rpx")
#library("MLInterfaces")
#library("pRoloc")
#library("pRolocdata")
#library("MSGFplus")
#library("rols")
#library("hpar")
install.packages("devtools")
library(devtools)
install_github("Bioconductor/BiocManager")
#The best way to install all these pakages is to use the following code
install.packages("BiocManager",dependencies = T)
install_github("Bioconductor/BiocManager")
install.packages(c("callr", "jsonlite", "knitr", "markdown", "rmarkdown"))
version
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
update.packages(ask = FALSE)
install_github("Bioconductor/BiocManager")
library(devtools)
install_github("Bioconductor/BiocManager")
4884*7.25
7.25*200
1450+35409
q()
22600+500
250/6.97
#install.packages("PTXQC",dependencies = TRUE)
library("devtools")             ## this might give a warning like 'WARNING: Rtools is required ...'. Ignore it.
library(PTXQC) # load the PTXQC library
require(PTXQC)
require(yaml)
require(methods)
3*1
q()
93-7
124-8
1Yq51bTz
147-13
42+9
q()
228537*792/140571
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("xcms", version = "3.8")
#Installing xcms package
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("xcms", version = "3.8")
source("http://bioconductor.org/biocLite.R")
biocLite("xcms")
library(xcms)
install.packages("BiocManager",dependencies = T)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("xcms", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("xcms", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("xcms")
chooseCRANmirror()
install.packages("BiocManager")
install.packages("installr"); library(installr)
install.packages("installr",dependencies = T)
install.packages("installr")
update.packages()
source("http://bioconductor.org/biocLite.R")
biocLite("xcms")
library(xcms)
source("http://bioconductor.org/biocLite.R")
biocLite("mzR")
useDevel()
biocLite("xcms")
install.packages("xcms")
version
install.packages("instaR")
library(instaR)
install.packages("installr")
help("instaR")
#Installing xcms package
source("http://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
update()
install.packages("install.load")
library(install.load)
require(install.load)
install.packages("installr")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
install.packages("installr")
setRepositories()
ap <- available.packages()
View(ap)
"xcms" %in% rownames(ap)
"xcms" %in% rownames(ap)
ap["xcms", "Depends"]
library(remotes)
install_version("foobarbaz", "0.1.2")
install_version("xcms", "3.8")
install_version("xcms")
version
version
version
version
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("xcms", version = "3.8")
library(xcms) # load the xcms library
BiocManager::install("xcms", version = "3.8")
library(xcms) # load the xcms library
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("xcms", version = "3.8")
library(xcms) # load the xcms library
library(xcms) # load the xcms library
help("rep")
library(xcms)
source("http://bioconductor.org/biocLite.R")
biocLite("xcms")
library(xcms)
source("http://bioconductor.org/biocLite.R")
biocLite("mzR")
source("http://bioconductor.org/biocLite.R")
biocLite("CAMERA")
library(CAMERA)
mSet<-InitDataObjects("pktable", "stat", FALSE)
install.packages("devtools")
library(devtools)
# For users with devtools > v2.0.0
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_opts = c("--no-resave-data", "--no-manual"))
## For users with devtools < v2.0.0
# Step 2: Install MetaboAnalystR without documentation
devtools::install_github("xia-lab/MetaboAnalystR")
# Step 2: Install MetaboAnalystR with documentation
devtools::install_github("xia-lab/MetaboAnalystR", build_vignettes=TRUE)
library(MetaboAnalystR)
# Ask for the arguments required to use the script
newWD <- readline("Directory's absolute path where the mzXML files are: ")
23000/13.45*4
23000/13.45
213*13
2500*3
7500*13.39
100245-40000
60245*7.25
BiocParallel::register(BiocParallel::SerialParam())
scone()
rawData <- ImportRawMSData("/home/javan/Desktop/mzml_files",format = "png", dpi = 72, width = 9)
#=========================================================================================================
#===================================Start data preprocessing==============================================
# Import mzML files, set path to folder containing two subfolders of samples
setwd("/home/javan/Desktop/mzml_files")
rawData <- ImportRawMSData("/home/javan/Desktop/mzml_files",format = "png", dpi = 72, width = 9)
?ImportRawMSData
library(devtools)
library(CAMERA)
library(xcms)
library(Cairo)
library(MetaboAnalystR)
?ImportRawMSData
#=========================================================================================================
#===================================Start data preprocessing==============================================
# Import mzML files, set path to folder containing two subfolders of samples
setwd("/home/javan/Desktop/mzml_files")
#=========================================================================================================
#===================================Start data preprocessing==============================================
# Import mzML files, set path to folder containing two subfolders of samples
setwd("/home/javan/Desktop/metaboTrial")
rawData <- ImportRawMSData("/home/javan/Desktop/metaboTrial",format = "png", dpi = 72, width = 9)
q()
R --version
library(MetaboAnalystR)
2450*3
install.packages("BiocParallel")
register(bpstart(BiocParallel::MulticoreParam(num_cores)))
install.packages("parallel")
library(parallel)
register(bpstart(BiocParallel::MulticoreParam(num_cores)))
install.packages("BiocParallel")
library(BiocParallel)
register(bpstart(BiocParallel::MulticoreParam(num_cores)))
register(bpstart(BiocParallel::MulticoreParam(3)))
#=========================================================================================================
#===================================Start data preprocessing==============================================
# Import mzML files, set path to folder containing two subfolders of samples
setwd("/home/javan/Desktop/metabolomics/mzml_files")
library(MetaboAnalystR)
register(bpstart(BiocParallel::MulticoreParam(3)))
rawData <- ImportRawMSData("/home/javan/Desktop/metabolomics/mzml_files",par.cores=FALSE,format = "png", dpi = 72, width = 9)
rawData <- ImportRawMSData("/home/javan/Desktop/metabolomics/mzml_files",par.cores=FALSE,format = "png", dpi = 72, width = 9)
rawData <- ImportRawMSData("/home/javan/Desktop/metabolomics/mzml_files",format = "png", dpi = 72, width = 9)
rawData <- ImportRawMSData("/home/javan/Desktop/metabolomics/mzml_files",par.cores=FALSE, t = "png", dpi = 72, width = 9)
rawData <- ImportRawMSData("/home/javan/Desktop/metabolomics/mzml_files",par.cores=FALSE)#, t = "png", dpi = 72, width = 9)
rawData <- ImportRawMSData("/home/javan/Desktop/metabolomics/mzml_files")#,par.cores=FALSE)#, t = "png", dpi = 72, width = 9)
register(bpstart(BiocParallel::MulticoreParam(3)))
library(BiocParallel)
register(bpstart(BiocParallel::MulticoreParam(3)))
rawData <- ImportRawMSData("/home/javan/Desktop/metabolomics/mzml_files",par.cores=FALSE)#, t = "png", dpi = 72, width = 9)
rawData <- ImportRawMSData("/home/javan/Desktop/metabolomics/mzml_files",par.cores=FALSE, t = "png", dpi = 72, width = 9)
rawData <- ImportRawMSData("/home/javan/Desktop/metabolomics/mzml_files",par.cores=FALSE)#, t = "png", dpi = 72, width = 9)
#Load the required libraries
library(devtools)
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_opts = c("--no-resave-data", "--no-manual", "--no-build-vignette"))
devtools::install_github("xia-lab/MetaboAnalystR")
#Load the required libraries
library(devtools)
devtools::install_github("xia-lab/MetaboAnalystR")
library(MetaboAnalystR)
#=========================================================================================================
#===================================Start data preprocessing==============================================
# Import mzML files, set path to folder containing two subfolders of samples
setwd("/home/javan/Desktop/metabolomics/mzml_files")
rawData <- ImportRawMSData("~/Desktop/metabolomics/mzml_files",format = "png", dpi = 72, width = 9)
rawData <- ImportRawMSData("~/Desktop/metabolomics/mzml_files",format = "png", dpi = 72, width = 9)
q()
q()
1.59*25
1.59*27
q()
library(lattice)
library(ggplot2)
Animals <- read.table(
header=TRUE, text='prob	ID_percent
bal_20ppm_>0.9	28.28
bal_20ppm_<0.1	68.89
bal_30ppm_>0.9	32.52
bal_30ppm_<0.1	65.08
saliva_25ppm_>0.9	36.7
saliva_25ppm_<0.1	63.3
')
ggplot(Animals, aes(factor(prob), ID_percent, fill = prob)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
Animals <- read.table(header=TRUE, text= '
Search_param	Maxquant	Maestro_pipeline
protein_group	1982	5103
spectra_submitted	1875013	1266250
Identified_spectra	408205	687898
Idantification_rate	21.77	54.6')
dim(Animals)
pipeline_com <- read.table(header=TRUE, text= '
Search_param	Maxquant	Maestro_pipeline
protein_group	1982	5103
spectra_submitted	1875013	1266250
Identified_spectra	408205	687898
Idantification_rate	21.77	54.6')
ggplot(Animals, aes(factor(Search_param), Maxquant, Maestro_pipeline, fill = Search_param)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
library(lattice)
library(ggplot2)
ggplot(Animals, aes(factor(Search_param), Maxquant, Maestro_pipeline, fill = Search_param)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
#===============================================================
pipeline_com <- read.table(header=TRUE, text= '
Search_param	Maxquant
protein_group	1982
spectra_submitted	1875013
Identified_spectra	408205
Idantification_rate	21.77')
ggplot(Animals, aes(factor(Search_param), Maxquant, fill = Search_param)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
#===============================================================
pipeline_com <- read.table(header=TRUE, text= '
Search_param	Maxquant
spectra_submitted	1875013
Identified_spectra	408205
')
ggplot(Animals, aes(factor(Search_param), Maxquant, fill = Search_param)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
ggplot(Animals, aes(factor(Search_param), Maxquant, fill = Search_param)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
#===============================================================
pipeline_com <- read.table(header=TRUE, text= '
Search_param	Maxquant
spectra_submitted	1875013
Identified_spectra	408205
')
ggplot(Animals, aes(factor(Search_param), Maxquant, fill = Search_param)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
ggplot(Animals, aes(factor(Search_param), Maxquant, fill = Search_param)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set2")
ggplot(Animals, aes(factor(Search_param), Maxquant, fill = Search_param)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set4")
ggplot(Animals, aes(factor(Search_param), Maxquant, fill = Search_param)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set45")
ggplot(Animals, aes(factor(Search_param), Maxquant, fill = Search_param)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set5")
ggplot(Animals, aes(factor(Search_param), Maxquant, fill = Search_param)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set3")
q()
?download.file
biocLite("DESeq2") ; library(DESeq2)
source("https://bioconductor.org/biocLite.R")
q()
library(DESeq2)
# Import data from featureCounts
## Previously ran at command line something like this:
## featureCounts -a genes.gtf -o counts.txt -T 12 -t exon -g gene_id GSM*.sam
setwd("/home/javan/Desktop/rna_analysis_scripts")
countdata <- read.table("feature_counts.txt", header=TRUE, row.names=1)
view(countdata)
View(countdata)
# Remove first five columns (chr, start, end, strand, length)
countdata <- countdata[ ,6:ncol(countdata)]
countdata
# Remove .bam or .sam from filenames
colnames(countdata) <- gsub("\\.[sb]am$", "", colnames(countdata))
# Remove first five columns (chr, start, end, strand, length)
countdata <- countdata[ ,2:6:ncol(countdata)]
countdata <- read.table("feature_counts.txt", header=TRUE, row.names=1)
# Remove .bam or .sam from filenames
colnames(countdata) <- gsub("\\.[sb]am$", "", colnames(countdata))
# Convert to matrix
countdata <- as.matrix(countdata)
head(countdata)
# Assign condition (first four are controls, second four contain the expansion)
(condition <- factor(c(rep("ctl", 4), rep("exp", 4))))
library(DESeq2)
# Create a coldata frame and instantiate the DESeqDataSet. See ?DESeqDataSetFromMatrix
(coldata <- data.frame(row.names=colnames(countdata), condition))
# Assign condition (first four are controls, second four contain the expansion)
(condition <- factor(c(rep("ctl", 2), rep("exp", 1))))
library(DESeq2)
# Create a coldata frame and instantiate the DESeqDataSet. See ?DESeqDataSetFromMatrix
(coldata <- data.frame(row.names=colnames(countdata), condition))
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
dds
# Run the DESeq pipeline
dds <- DESeq(dds)
#Import featureCounts output
# Import gene counts table
# - skip first row (general command info)
# - make row names the gene identifiers
setwd("/home/javan/Desktop/rna_analysis_scripts")
countdata <- read.table("final_counts.txt", header = TRUE, skip = 1, row.names = 1)
#Import featureCounts output
# Import gene counts table
# - skip first row (general command info)
# - make row names the gene identifiers
setwd("/home/javan/Desktop/rna_analysis_scripts")
countdata <- read.table("final_counts.txt", header = TRUE, skip = 1, row.names = 1)
countdata <- read.table("feature_counts.txt", header=TRUE, row.names=1)
View(countdata)
# Remove first five columns (chr, start, end, strand, length)
countdata <- countdata[ ,c(-1:-5)]
countdata <- read.table("feature_counts.txt", header=TRUE, row.names=1)
#Import featureCounts output
# Import gene counts table
# - skip first row (general command info)
# - make row names the gene identifiers
setwd("/home/javan/Desktop/rna_analysis_scripts")
countdata <- read.table("final_counts.txt", header = TRUE, skip = 1, row.names = 1)
#Import featureCounts output
# Import gene counts table
# - skip first row (general command info)
# - make row names the gene identifiers
setwd("/home/javan/Desktop/rna_analysis_scripts")
countdata <- read.table("feature_counts.txt", header = TRUE, skip = 1, row.names = 1)
countdata
# Remove .bam + '..' from column identifiers
colnames(countdata) <- gsub(".bam", "", colnames(countdata), fixed = T)
colnames(countdata) <- gsub("..", "", colnames(countdata), fixed = T)
head(countdata)
View(countdata)
View(countdata)
# Remove length/char columns
countdata <- countdata[ ,c(-1:-5)]
# Make sure ID's are correct
countdata
# Import metadata file
# - make row names the matching sampleID's from the countdata
metadata <- read.delim("metadata.txt", row.names = 1)
# Add sampleID's to the mapping file
metadata$sampleid <- row.names(metadata)
metadata
# Reorder sampleID's to match featureCounts column order.
metadata <- metadata[match(colnames(countdata), metadata$sampleid), ]
# Make sure ID's are correct
head(metadata)
q()
